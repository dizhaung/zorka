/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

// This file contains instrumentation definitions for Apache httpclient library.

zorka.require(
  "zabbix.bsh",
  "tracer.bsh",
  "apache/apache.bsh"
);

// Tracer tuning
if (zorka.boolCfg("tracer")) {
    tracer.exclude(
        "org.apache.commons.httpclient.**",
        "org.apache.http.impl.client.**",
        "org.apache.http.message.TokenParser",
        "org.apache.http.util.Args"
    );
}


__apache_httpclient() {

  // Default values for httpclient tracer options
  zorka.defCfg("apache.httpclient.trace", zorka.stringCfg("tracer", "no"));
  zorka.defCfg("apache.httpclient.trace.time", zorka.longCfg("tracer.min.trace.time"));

  _trace = zorka.boolCfg("apache.httpclient.trace");
  _traceTime = zorka.longCfg("apache.httpclient.trace.time");

  headers_processor() {
      process(rec) {
          method = rec.get("METHOD");
          if (method != null) {
            ihdr = util.get(method, "requestHeaders");
            if (method != null && ihdr != null) {
              for (hdr : ihdr) {
                  tracer.newAttr("ReqHdr__" + hdr.getName(), ""+hdr.getValue());
                }
            }
            ohdr = util.get(method, "responseHeaders");
            if (method != null && ohdr != null) {
                for (hdr : ohdr) {
                    tracer.newAttr("RespHdr__" + hdr.getName(), ""+hdr.getValue());
                }
            }
          }
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  spy.add(
    spy.instrument("APACHE_HTTPCLIENT_EXECUTE")
      .onEnter(spy.fetchArg("METHOD", 2),
        _trace ? spy.subchain(
          tracer.begin("HTTP_CLI", _traceTime),
          tracer.formatAttr("URI", "${METHOD.URI}"),
          tracer.formatAttr("METHOD", "${METHOD.method}")
        ) : null)
      .onReturn(spy.fetchRetVal("RET"), _trace ? tracer.attr("RET", "RET") : null)
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
        _trace ? spy.subchain(
          tracer.formatAttr("STATUS", "${METHOD.statusCode}"),
          tracer.formatAttr("STATUS_LINE", "${METHOD.getStatusLine}"),
          headers_processor()
        ) : null)
      .include(spy.byMethod(0, "org.apache.commons.httpclient.HttpClient", "executeMethod", "int", 
          "org.apache.commons.httpclient.HostConfiguration", "org.apache.commons.httpclient.HttpMethod",
          "org.apache.commons.httpclient.HttpState"))
  );

  headers_processor1() {
      process(rec) {
          req = rec.get("REQ");
          if (req != null && req.getAllHeaders() != null) {
              for (hdr : req.getAllHeaders()) {
                  tracer.newAttr("ReqHdr__" + hdr.getName(), ""+hdr.getValue());
              }
          }
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  spy.add(
    spy.instrument("APACHE_HTTPCLIENT_EXECUTE1")
      .onEnter(spy.fetchArg("HOST", 1), spy.fetchArg("REQ", 2),
        _trace ? spy.subchain(
          tracer.begin("HTTP_CLI", _traceTime),
          tracer.formatAttr("HOST", "${HOST}")
        ) : null)
      .onReturn(spy.fetchRetVal("RET"),
        _trace ? spy.subchain(
          tracer.formatAttr("STATUS", "${RET.status}"),
          tracer.formatAttr("STATUS_LINE", "${RET.statusLine}")
        ) : null)
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
        _trace ? spy.subchain(
          headers_processor1()
        ) : null)
      .include(spy.byMethod(0, "org.apache.http.**", "execute", "org.apache.http.HttpResponse",
        "org.apache.http.HttpHost", "org.apache.http.HttpRequest", "org.apache.http.HttpContext")));


  spy.add(
    spy.instrument("APACHE_HTTPCLIENT_EXECUTE2")
      .onEnter(spy.fetchArg("REQ", 1), spy.fetchArg("CONN", 2),
        _trace ? spy.subchain(
          tracer.begin("HTTP_CLI", _traceTime),
          tracer.formatAttr("URI", "${REQ.requestLine}"),
          tracer.formatAttr("HOST", "${CONN.remoteAddress}:${CONN.remotePort}}")
        ) : null)
      .onReturn(spy.fetchRetVal("RET"),
        _trace ? spy.subchain(
          tracer.formatAttr("STATUS", "${RET.status}"),
          tracer.formatAttr("STATUS_LINE", "${RET.statusLine}")
        ) : null)
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
        _trace ? spy.subchain(
          headers_processor1()
        ) : null)
      .include(spy.byMethod(0, "org.apache.http.**", "execute", "org.apache.http.HttpResponse",
        "org.apache.http.HttpRequest", "org.apache.http.HttpClientConnection", "org.apache.http.HttpContext")));

  if (zorka.boolCfg("zabbix.active")) {
    zabbix.tagMetadata("HTTP:CLIENT");
  }

  return this;

}

apache_httpclient = __apache_httpclient();

